plugins {
    id 'de.dfki.mary.voicebuilding-festvox' // transitively applies voicebuilding-data plugin
}

marytts {
    voice {
        gender = voiceGender
    }
}

repositories {
    ivy {
        url 'http://festvox.org/examples'
        allowInsecureProtocol = true
        patternLayout {
            artifact '[module]_[classifier]/packed/[artifact].[ext]'
        }
        metadataSources {
            artifact()
        }
    }
}

dependencies {
    data dataDependency
}

task testPlugins(group: 'Verification') {
    doLast {
        assert plugins.findPlugin('java')
        assert plugins.findPlugin('de.dfki.mary.voicebuilding-base')
        assert plugins.findPlugin('de.dfki.mary.voicebuilding-data')
    }
}

task testConfigurations(group: 'Verification') {
    doLast {
        assert configurations.data
        assert configurations.marytts
    }
}

task testSourceSets(group: 'Verification') {
    doLast {
        assert sourceSets.data
    }
}

task testDependencies(group: 'Verification') {
    doLast {
        assert configurations.data.dependencies.find { it.name == dataDependencyName }
        assert configurations.marytts.dependencies.find { it.name == "marytts-lang-$marytts.voice.locale.language" }
    }
}

task testProcessDataResources {
    group 'Verification'
    dependsOn processDataResources
    doLast {
        assert fileTree(sourceSets.data.output.resourcesDir).include('*.wav').files
        assert fileTree(sourceSets.data.output.resourcesDir).include('*.lab').files
        assert fileTree(sourceSets.data.output.resourcesDir).include('*.data').files
    }
}

text.srcFile = file("$sourceSets.data.output.resourcesDir/time.data")

task testTemplates {
    group 'Verification'
    dependsOn templates
    doLast {
        ['extractPitch.praat', 'pitchmarks.praat'].each { resourceName ->
            def resourceFile = file("$buildDir/templates/$resourceName")
            assert resourceFile.exists()
        }
    }
}

generateAllophones.dependsOn text

wav {
    doLast {
        ant.copy file: "$buildDir/wav/time0001.wav", tofile: "$buildDir/wav/unused.wav"
    }
}

task testWav {
    group 'Verification'
    dependsOn wav
    doLast {
        assert fileTree(buildDir).include('wav/*.wav').files
    }
}

basenames {
    textDir = text.destDir
    labDir = lab.destDir
    include 'time*', 'unused'
    exclude '*0023'
}

task testBasenames(group: 'Verification') {
    dependsOn basenames
    doLast {
        def basenamesFile = file("$buildDir/basenames.lst")
        assert basenamesFile.exists()
        def actual = basenamesFile.readLines()
        def expected = fileTree("$buildDir/wav").include('*.wav').exclude('time0023.wav', 'unused.wav').collect {
            it.name - '.wav'
        }.unique().toSorted()
        assert actual == expected
    }
}

task testPraatPitchExtractor {
    group 'Verification'
    dependsOn praatPitchExtractor
    doLast {
        def actual = fileTree("$buildDir/Pitch").include('*.Pitch').collect { it.name - '.Pitch' } as Set
        def expected = file("$buildDir/basenames.lst").readLines() as Set
        assert actual == expected
    }
}

task testPraatPitchmarker {
    group 'Verification'
    dependsOn praatPitchmarker
    doLast {
        def actual = fileTree("$buildDir/PointProcess").include('*.PointProcess').collect {
            it.name - '.PointProcess'
        } as Set
        def expected = file("$buildDir/basenames.lst").readLines() as Set
        assert actual == expected
    }
}

task testPitchmarkConverter {
    group 'Verification'
    dependsOn pitchmarkConverter
    doLast {
        def actual = fileTree("$buildDir/pm").include('*.pm').collect { it.name - '.pm' } as Set
        def expected = file("$buildDir/basenames.lst").readLines() as Set
        assert actual == expected
    }
}

task testMcepExtractor {
    group 'Verification'
    dependsOn mcepExtractor
    doLast {
        def actual = fileTree("$buildDir/mcep").include('*.mcep').collect { it.name - '.mcep' } as Set
        def expected = file("$buildDir/basenames.lst").readLines() as Set
        assert actual == expected
    }
}

task testText {
    group 'Verification'
    dependsOn text
    doLast {
        assert fileTree(buildDir).include('text/*.txt').files
    }
}

task testGenerateAllophones {
    group 'Verification'
    dependsOn generateAllophones
    doLast {
        def actual = fileTree("$buildDir/prompt_allophones").include('*.xml').collect { it.name - '.xml' } as Set
        def expected = file("$buildDir/basenames.lst").readLines() as Set
        assert actual == expected
    }
}

task testGeneratePhoneFeatures {
    group 'Verification'
    dependsOn generatePhoneFeatures
    doLast {
        assert fileTree(buildDir).include('phonefeatures/*.pfeats').files
        def actual = fileTree("$buildDir/phonefeatures").include('*.pfeats').collect { it.name - '.pfeats' } as Set
        def expected = file("$buildDir/basenames.lst").readLines() as Set
        assert actual == expected
    }
}

task testGenerateHalfPhoneFeatures {
    group 'Verification'
    dependsOn generateHalfPhoneFeatures
    doLast {
        def actual = fileTree("$buildDir/halfphonefeatures").include('*.hpfeats').collect {
            it.name - '.hpfeats'
        } as Set
        def expected = file("$buildDir/basenames.lst").readLines() as Set
        assert actual == expected
    }
}
