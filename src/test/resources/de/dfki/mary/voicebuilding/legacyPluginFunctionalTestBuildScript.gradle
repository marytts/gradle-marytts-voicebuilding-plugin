buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'xmlunit', name: 'xmlunit', version: '1.6'
    }
}

plugins {
    id 'de.dfki.mary.voicebuilding-legacy'
    id 'de.dfki.mary.voicebuilding-festvox'
}

marytts {
    voice {
        name = voiceName
        gender = voiceGender
        region = voiceLocaleRegion
        license {
            url = voiceLicenseUrl
        }
    }
}

def voiceLocale = new Locale.Builder()
        .setLanguage(voiceLocaleLanguage)
        .setRegion(voiceLocaleRegion)
        .build()

repositories {
    ivy {
        url 'http://festvox.org/examples'
        allowInsecureProtocol = true
        patternLayout {
            artifact '[module]_[classifier]/packed/[artifact].[ext]'
        }
        metadataSources {
            artifact()
        }
    }
}

dependencies {
    data group: 'org.festvox', name: 'cmu_time_awb', classifier: 'ldom', ext: 'tar.bz2'
}

text {
    srcFile = file("$sourceSets.data.output.resourcesDir/time.data")
}

basenames {
    textDir = text.destDir
    labDir = lab.destDir
    include 'time*', 'unused'
    exclude '*0023'
}

generateAllophones {
    srcDir = text.destDir
}

task testPlugins(group: 'Verification') {
    doLast {
        assert plugins.findPlugin('de.dfki.mary.voicebuilding-legacy')
        assert plugins.findPlugin('de.dfki.mary.voicebuilding-base')
        assert plugins.findPlugin('de.dfki.mary.voicebuilding-data')
        assert plugins.findPlugin('de.dfki.mary.voicebuilding-festvox')
    }
}

task testProcessPhoneLabels(group: 'Verification') {
    dependsOn processPhoneLabels
    doLast {
        assert fileTree(buildDir).include('lab_processed/*.lab').files
    }
}

task testAlignLabelsWithPrompts(group: 'Verification') {
    dependsOn alignLabelsWithPrompts
    doLast {
        assert fileTree(buildDir).include('allophones/*.xml').files
    }
}

task testSplitPhoneLabelsIntoHalfPhones(group: 'Verification') {
    dependsOn splitPhoneLabelsIntoHalfPhones
    doLast {
        assert fileTree(buildDir).include('halfphonelab_aligned/*.hplab').files
    }
}

task testPhoneUnitFileMaker(group: 'Verification') {
    dependsOn phoneUnitFileMaker
    doLast {
        assert file("$buildDir/mary/phoneUnits.mry").exists()
    }
}

task testHalfPhoneUnitFileMaker(group: 'Verification') {
    dependsOn halfPhoneUnitFileMaker
    doLast {
        assert file("$buildDir/mary/halfphoneUnits.mry").exists()
    }
}

task testFeatureLister(group: 'Verification') {
    dependsOn featureLister
    doLast {
        assert file("$buildDir/mary/features.txt").exists()
    }
}

task testPhoneUnitFeatureLister(group: 'Verification') {
    dependsOn phoneUnitFeatureLister
    doLast {
        def phoneUnitFeatureFile = file("$buildDir/phoneUnitFeatures.txt")
        assert phoneUnitFeatureFile.exists()
        def features = phoneUnitFeatureFile.readLines()
        def featureToListFirst = phoneUnitFeatureLister.featureToListFirst.get()
        assert features.count(featureToListFirst) == 1
        assert features.first() == featureToListFirst
        def featuresToExclude = phoneUnitFeatureLister.featuresToExclude.get()
        assert features.intersect(featuresToExclude).isEmpty()
    }
}

task testHalfPhoneUnitFeatureLister(group: 'Verification') {
    dependsOn halfPhoneUnitFeatureLister
    doLast {
        def halfPhoneUnitFeatureFile = file("$buildDir/halfPhoneUnitFeatures.txt")
        assert halfPhoneUnitFeatureFile.exists()
        def features = halfPhoneUnitFeatureFile.readLines()
        def featureToListFirst = halfPhoneUnitFeatureLister.featureToListFirst.get()
        assert features.count(featureToListFirst) == 1
        assert features.first() == featureToListFirst
    }
}

task testPhoneUnitFeatureComputer(group: 'Verification') {
    dependsOn phoneUnitFeatureComputer
    doLast {
        assert fileTree(buildDir).include('phonefeatures/*.pfeats').files
    }
}

task testGeneratePhoneFeatureDefinitionFile(group: 'Verification') {
    dependsOn generatePhoneFeatureDefinitionFile
    doLast {
        assert file("$buildDir/mary/phoneUnitFeatureDefinition.txt").exists()
    }
}

task testHalfPhoneUnitFeatureComputer(group: 'Verification') {
    dependsOn halfPhoneUnitFeatureComputer
    doLast {
        assert fileTree(buildDir).include('halfphonefeatures/*.hpfeats').files
    }
}

task testGenerateHalfPhoneFeatureDefinitionFile(group: 'Verification') {
    dependsOn generateHalfPhoneFeatureDefinitionFile
    doLast {
        assert file("$buildDir/mary/halfphoneUnitFeatureDefinition.txt").exists()
    }
}

task testMakeBasenameDatagrams(group: 'Verification') {
    dependsOn makeBasenameDatagrams
    doLast {
        assert fileTree(buildDir).include('basenameDatagrams/*.json').files
    }
}

task testBasenameTimelineMaker(group: 'Verification') {
    dependsOn basenameTimelineMaker
    doLast {
        assert file("$buildDir/mary/timeline_basenames.mry").exists()
    }
}

task testMakeWaveDatagrams(group: 'Verification') {
    dependsOn makeWaveDatagrams
    doLast {
        assert fileTree(buildDir).include('waveDatagrams/*.json').files
    }
}

task testWaveTimelineMaker(group: 'Verification') {
    dependsOn waveTimelineMaker
    doLast {
        assert file("$buildDir/mary/timeline_waveforms.mry").exists()
    }
}

task testMakeMcepDatagrams(group: 'Verification') {
    dependsOn makeMcepDatagrams
    doLast {
        assert fileTree(buildDir).include('mcepDatagrams/*.json').files
    }
}

task testGenerateMcepTimelineHeader(group: 'Verification') {
    dependsOn generateMcepTimelineHeader
    doLast {
        assert file("$buildDir/mary/timeline_mcep.properties").exists()
    }
}

task testMcepTimelineMaker(group: 'Verification') {
    dependsOn mcepTimelineMaker
    doLast {
        assert file("$buildDir/mary/timeline_mcep.mry").exists()
    }
}

task testPhoneFeatureFileMaker(group: 'Verification') {
    dependsOn phoneFeatureFileMaker
    doLast {
        assert file("$buildDir/mary/phoneFeatures.mry").exists()
    }
}

task testHalfPhoneFeatureFileMaker(group: 'Verification') {
    dependsOn halfPhoneFeatureFileMaker
    doLast {
        assert file("$buildDir/mary/halfphoneFeatures.mry").exists()
    }
}

task testF0ContourFeatureFileMaker(group: 'Verification') {
    dependsOn f0ContourFeatureFileMaker
    doLast {
        assert file("$buildDir/mary/syllableF0Polynomials.mry").exists()
    }
}

task testGenerateAcousticFeatureDefinitionFile(group: 'Verification') {
    dependsOn generateAcousticFeatureDefinitionFile
    doLast {
        assert file("$buildDir/mary/halfphoneUnitFeatureDefinition_ac.txt").exists()
    }
}

task testAcousticFeatureFileMaker(group: 'Verification') {
    dependsOn acousticFeatureFileMaker
    doLast {
        assert file("$buildDir/mary/halfphoneFeatures_ac.mry").exists()
    }
}

task testGenerateJoinCostWeights(group: 'Verification') {
    dependsOn generateJoinCostWeights
    doLast {
        assert file("$buildDir/mary/joinCostWeights.txt").exists()
    }
}

task testJoinCostFileMaker(group: 'Verification') {
    dependsOn joinCostFileMaker
    doLast {
        assert file("$buildDir/mary/joinCostFeatures.mry").exists()
    }
}

task testGenerateFeatureSequence(group: 'Verification') {
    dependsOn generateFeatureSequence
    doLast {
        assert file("$buildDir/mary/featureSequence.txt").exists()
    }
}

task testCartBuilder(group: 'Verification') {
    dependsOn cartBuilder
    doLast {
        assert file("$buildDir/mary/cart.mry").exists()
    }
}

task testGenerateDurationFeatureDescription(group: 'Verification') {
    dependsOn generateDurationFeatureDescription
    doLast {
        assert file("$buildDir/prosody/dur.desc").exists()
    }
}

task testGenerateF0FeatureDescription(group: 'Verification') {
    dependsOn generateF0FeatureDescription
    doLast {
        assert file("$buildDir/prosody/f0.desc").exists()
    }
}

task testExtractDurationFeatures(group: 'Verification') {
    dependsOn extractDurationFeatures
    doLast {
        assert file("$buildDir/prosody/dur.feats").exists()
    }
}

task testExtractF0Features(group: 'Verification') {
    dependsOn extractF0Features
    doLast {
        assert file("$buildDir/prosody/f0.feats").exists()
    }
}

task testTrainDurationCart(group: 'Verification') {
    dependsOn trainDurationCart
    doLast {
        assert file("$buildDir/prosody/dur.tree").exists()
    }
}

task testTrainF0LeftCart(group: 'Verification') {
    dependsOn trainF0LeftCart
    doLast {
        assert file("$buildDir/prosody/f0.left.tree").exists()
    }
}

task testTrainF0MidCart(group: 'Verification') {
    dependsOn trainF0MidCart
    doLast {
        assert file("$buildDir/prosody/f0.mid.tree").exists()
    }
}

task testTrainF0RightCart(group: 'Verification') {
    dependsOn trainF0RightCart
    doLast {
        assert file("$buildDir/prosody/f0.right.tree").exists()
    }
}

task testConvertDurationCart(group: 'Verification') {
    dependsOn convertDurationCart
    doLast {
        assert file("$buildDir/mary/dur.tree").exists()
    }
}

task testConvertF0LeftCart(group: 'Verification') {
    dependsOn convertF0LeftCart
    doLast {
        assert file("$buildDir/mary/f0.left.tree").exists()
    }
}

task testConvertF0MidCart(group: 'Verification') {
    dependsOn convertF0MidCart
    doLast {
        assert file("$buildDir/mary/f0.mid.tree").exists()
    }
}

task testConvertF0RightCart(group: 'Verification') {
    dependsOn convertF0RightCart
    doLast {
        assert file("$buildDir/mary/f0.right.tree").exists()
    }
}

task testProcessResources(group: 'Verification') {
    dependsOn processResources
    doLast {
        def prefix = "$sourceSets.main.output.resourcesDir/marytts/voice/$voiceNameCamelCase"
        assert file("$prefix/cart.mry").exists()
        assert file("$prefix/dur.tree").exists()
        assert file("$prefix/f0.left.tree").exists()
        assert file("$prefix/f0.mid.tree").exists()
        assert file("$prefix/f0.right.tree").exists()
        assert file("$prefix/halfphoneUnitFeatureDefinition_ac.txt").exists()
        assert file("$prefix/joinCostWeights.txt").exists()
    }
}

task testProcessLegacyResources(group: 'Verification') {
    dependsOn processLegacyResources
    doLast {
        def prefix = "$buildDir/legacy/lib/voices/$voiceName"
        assert file("$prefix/halfphoneFeatures_ac.mry").exists()
        assert file("$prefix/halfphoneUnits.mry").exists()
        assert file("$prefix/joinCostFeatures.mry").exists()
        assert file("$prefix/timeline_basenames.mry").exists()
        assert file("$prefix/timeline_waveforms.mry").exists()
    }
}

task testGenerateVoiceConfig(group: 'Verification') {
    dependsOn generateConfig
    doLast {
        def configFile = file("$buildDir/generated.config")
        assert configFile.exists()
        def actual = new Properties()
        configFile.withInputStream {
            actual.load it
        }
        def expected = [
                name                                         : "$voiceName",
                locale                                       : "$voiceLocale",
                'unitselection.voices.list'                  : "$voiceName",
                "voice.${voiceName}.acousticModels"          : 'duration F0 midF0 rightF0',
                "voice.${voiceName}.audioTimelineFile"       : "MARY_BASE/lib/voices/$voiceName/timeline_waveforms.mry",
                "voice.${voiceName}.audioTimelineReaderClass": 'marytts.unitselection.data.TimelineReader',
                "voice.${voiceName}.basenameTimeline"        : "MARY_BASE/lib/voices/$voiceName/timeline_basenames.mry",
                "voice.${voiceName}.cartFile"                : "jar:/marytts/voice/$voiceNameCamelCase/cart.mry",
                "voice.${voiceName}.cartReaderClass"         : 'marytts.cart.io.MARYCartReader',
                "voice.${voiceName}.concatenatorClass"       : 'marytts.unitselection.concat.OverlapUnitConcatenator',
                "voice.${voiceName}.databaseClass"           : 'marytts.unitselection.data.DiphoneUnitDatabase',
                "voice.${voiceName}.domain"                  : 'general',
                "voice.${voiceName}.duration.attribute"      : 'd',
                "voice.${voiceName}.duration.data"           : "jar:/marytts/voice/$voiceNameCamelCase/dur.tree",
                "voice.${voiceName}.duration.model"          : 'cart',
                "voice.${voiceName}.F0.applyTo"              : 'firstVoicedSegments',
                "voice.${voiceName}.F0.attribute"            : 'f0',
                "voice.${voiceName}.F0.attribute.format"     : '(0,%.0f)',
                "voice.${voiceName}.F0.data"                 : "jar:/marytts/voice/$voiceNameCamelCase/f0.left.tree",
                "voice.${voiceName}.F0.model"                : 'cart',
                "voice.${voiceName}.F0.predictFrom"          : 'firstVowels',
                "voice.${voiceName}.featureFile"             : "MARY_BASE/lib/voices/$voiceName/halfphoneFeatures_ac.mry",
                "voice.${voiceName}.gender"                  : "$voiceGender",
                "voice.${voiceName}.joinCostClass"           : 'marytts.unitselection.select.JoinCostFeatures',
                "voice.${voiceName}.joinCostFile"            : "MARY_BASE/lib/voices/$voiceName/joinCostFeatures.mry",
                "voice.${voiceName}.joinCostWeights"         : "jar:/marytts/voice/$voiceNameCamelCase/joinCostWeights.txt",
                "voice.${voiceName}.midF0.applyTo"           : 'firstVowels',
                "voice.${voiceName}.midF0.attribute"         : 'f0',
                "voice.${voiceName}.midF0.attribute.format"  : '(50,%.0f)',
                "voice.${voiceName}.midF0.data"              : "jar:/marytts/voice/$voiceNameCamelCase/f0.mid.tree",
                "voice.${voiceName}.midF0.model"             : 'cart',
                "voice.${voiceName}.midF0.predictFrom"       : 'firstVowels',
                "voice.${voiceName}.locale"                  : "$voiceLocale",
                "voice.${voiceName}.rightF0.applyTo"         : 'lastVoicedSegments',
                "voice.${voiceName}.rightF0.attribute"       : 'f0',
                "voice.${voiceName}.rightF0.attribute.format": '(100,%.0f)',
                "voice.${voiceName}.rightF0.data"            : "jar:/marytts/voice/$voiceNameCamelCase/f0.right.tree",
                "voice.${voiceName}.rightF0.model"           : 'cart',
                "voice.${voiceName}.rightF0.predictFrom"     : 'firstVowels',
                "voice.${voiceName}.samplingRate"            : '16000',
                "voice.${voiceName}.selectorClass"           : 'marytts.unitselection.select.DiphoneUnitSelector',
                "voice.${voiceName}.targetCostClass"         : 'marytts.unitselection.select.DiphoneFFRTargetCostFunction',
                "voice.${voiceName}.targetCostWeights"       : "jar:/marytts/voice/$voiceNameCamelCase/halfphoneUnitFeatureDefinition_ac.txt",
                "voice.${voiceName}.unitReaderClass"         : 'marytts.unitselection.data.UnitFileReader',
                "voice.${voiceName}.unitsFile"               : "MARY_BASE/lib/voices/$voiceName/halfphoneUnits.mry",
                "voice.${voiceName}.viterbi.beamsize"        : '100',
                "voice.${voiceName}.viterbi.wTargetCosts"    : '0.7'
        ] as Properties
        assert actual == expected
    }
}

import org.custommonkey.xmlunit.XMLUnit

import java.util.zip.ZipFile

task testJar(group: 'Verification') {
    dependsOn jar
    doLast {
        def actual = new ZipFile(jar.archivePath).entries().findAll { !it.isDirectory() }.collect { it.name } as Set
        def expected = [
                'META-INF/MANIFEST.MF',
                'META-INF/services/marytts.config.MaryConfig',
                "META-INF/maven/$project.group/voice-$voiceName/pom.xml",
                "META-INF/maven/$project.group/voice-$voiceName/pom.properties",
                "marytts/voice/$voiceNameCamelCase/${voiceNameCamelCase}Config.class",
                "marytts/voice/$voiceNameCamelCase/cart.mry",
                "marytts/voice/$voiceNameCamelCase/dur.tree",
                "marytts/voice/$voiceNameCamelCase/f0.left.tree",
                "marytts/voice/$voiceNameCamelCase/f0.mid.tree",
                "marytts/voice/$voiceNameCamelCase/f0.right.tree",
                "marytts/voice/$voiceNameCamelCase/halfphoneUnitFeatureDefinition_ac.txt",
                "marytts/voice/$voiceNameCamelCase/joinCostWeights.txt",
                "marytts/voice/$voiceNameCamelCase/${voiceNameCamelCase.toLowerCase()}.config"
        ] as Set
        assert actual == expected
    }
}

task testLegacyZip(group: 'Verification') {
    dependsOn legacyZip
    doLast {
        def zipFileName = "$project.name${version == 'unspecified' ? '' : '-' + version}-legacy.zip"
        def zipFile = distsDirectory.get().file(zipFileName)
        assert legacyZip.archiveFile.get() == zipFile
        def actual = new ZipFile(zipFile.asFile).entries().findAll { !it.isDirectory() }.collect { it.name } as Set
        def expected = [
                "lib/voices/$voiceName/halfphoneFeatures_ac.mry",
                "lib/voices/$voiceName/halfphoneUnits.mry",
                "lib/voices/$voiceName/joinCostFeatures.mry",
                "lib/voices/$voiceName/timeline_basenames.mry",
                "lib/voices/$voiceName/timeline_waveforms.mry",
                "lib/$jar.archiveName"
        ] as Set
        assert actual == expected
    }
}

task testLegacyDescriptor(group: 'Verification') {
    dependsOn legacyDescriptor
    doLast {
        def zipFileName = "$project.name${version == 'unspecified' ? '' : '-' + version}-legacy.zip"
        def zipFile = distsDirectory.get().file(zipFileName).asFile
        ant.checksum file: zipFile, algorithm: 'MD5', property: 'md5Hash'
        def expected = new groovy.xml.StreamingMarkupBuilder().bind {
            'marytts-install'(xmlns: "http://mary.dfki.de/installer") {
                voice(locale: voiceLocale, name: voiceName, gender: voiceGender, type: 'unit selection', version: version) {
                    delegate.description "A $voiceGender English unit selection voice"
                    license(href: voiceLicenseUrl)
                    delegate.package(md5sum: ant.md5Hash, filename: zipFile.name, size: zipFile.size()) {
                        location(folder: true, href: "http://mary.dfki.de/download/$maryVersion/")
                    }
                    depends(language: voiceLocale.toLanguageTag(), version: maryVersion)
                }
            }
        } as String
        def actual = legacyDescriptor.destFile.get().asFile.text
        XMLUnit.ignoreWhitespace = true
        assert XMLUnit.compareXML(expected, actual).similar()
    }
}

task testArtifacts(group: 'Verification') {
    doLast {
        def actual = configurations.getByName('default').allArtifacts.files.collect() as Set
        def expected = [jar.archivePath, legacyZip.archivePath] as Set
        assert actual == expected
    }
}
